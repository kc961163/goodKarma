// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// /api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.VarChar(255)
  content   String?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
  likes     Like[]
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String?
  posts    Post[]
  sessions Session[]
  comments Comment[]
  likes    Like[]
  coachingData CoachingData?
}

model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  
  // For nested comments (replies)
  parentComment Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  parentId      Int?
  replies       Comment[] @relation("CommentReplies")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([postId, userId]) // Ensures a user can only like a post once
}

model CoachingData {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  userProfile Json?    // Stores user profile data
  goals       Json?    // Stores user goals
  advice      Json?    // Stores API responses for advice
  progress    Json?    // Stores progress tracking data
  adviceCallUsedThisMonth Boolean @default(false)
  progressCallUsedThisMonth Boolean @default(false)
  lastAdviceCallDate DateTime?
  lastProgressCallDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
